



Internet Engineering Task Force                                  N. Kuhn
Internet-Draft                                                      CNES
Intended status: Informational                                E. Stephan
Expires: November 8, 2021                                         Orange
                                                            G. Fairhurst
                                                                T. Jones
                                                  University of Aberdeen
                                                              C. Huitema
                                                    Private Octopus Inc.
                                                             May 7, 2021


               Transport parameters for 0-RTT connections
                      draft-kuhn-quic-0rtt-bdp-09

Abstract

   QUIC 0-RTT transport features currently focuses on egress traffic
   optimization.  This draft proposes a QUIC extension that improves the
   performance of ingress traffic.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 8, 2021.

Copyright Notice

   Copyright (c) 2021 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect



Kuhn, et al.            Expires November 8, 2021                [Page 1]

Internet-Draft             Transport for 0-RTT                  May 2021


   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
     1.1.  Notations and terms . . . . . . . . . . . . . . . . . . .   3
     1.2.  Requirements Language . . . . . . . . . . . . . . . . . .   3
   2.  Safe jump start . . . . . . . . . . . . . . . . . . . . . . .   4
     2.1.  Rationale behind the safety guidelines  . . . . . . . . .   4
     2.2.  Rationale #1: Variable network conditions . . . . . . . .   4
     2.3.  Rationale #2: Malicious clients . . . . . . . . . . . . .   5
     2.4.  Trade-off between the different solutions . . . . . . . .   5
       2.4.1.  Security aspects  . . . . . . . . . . . . . . . . . .   5
       2.4.2.  Interoperability and use-cases  . . . . . . . . . . .   6
       2.4.3.  Summary . . . . . . . . . . . . . . . . . . . . . . .   6
   3.  Safety guidelines . . . . . . . . . . . . . . . . . . . . . .   7
   4.  Implementation considerations . . . . . . . . . . . . . . . .   9
     4.1.  Rationale behind the different implementation options . .   9
     4.2.  Independent local storage of values . . . . . . . . . . .   9
     4.3.  Using NEW_TOKEN frames  . . . . . . . . . . . . . . . . .   9
     4.4.  BDP Frame . . . . . . . . . . . . . . . . . . . . . . . .  10
       4.4.1.  BDP Frame Format  . . . . . . . . . . . . . . . . . .  10
       4.4.2.  Extension activation  . . . . . . . . . . . . . . . .  11
   5.  Discussion  . . . . . . . . . . . . . . . . . . . . . . . . .  11
     5.1.  BDP extension protected as much as initial_max_data . . .  11
     5.2.  Other use-cases . . . . . . . . . . . . . . . . . . . . .  12
       5.2.1.  Optimizing client's requests  . . . . . . . . . . . .  12
       5.2.2.  Sharing transport information across multiple
               connections . . . . . . . . . . . . . . . . . . . . .  12
   6.  Acknowledgments . . . . . . . . . . . . . . . . . . . . . . .  12
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  12
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .  12
   9.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  12
     9.1.  Normative References  . . . . . . . . . . . . . . . . . .  12
     9.2.  Informative References  . . . . . . . . . . . . . . . . .  13
   Appendix A.  Example  . . . . . . . . . . . . . . . . . . . . . .  14
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  14

1.  Introduction

   QUIC 0-RTT transport features currently focuses on egress traffic
   optimization.  This draft proposes a QUIC extension to improve the
   performance of ingress traffic.





Kuhn, et al.            Expires November 8, 2021                [Page 2]

Internet-Draft             Transport for 0-RTT                  May 2021


   There are cases where clients resume a session to post or to get a
   large document.  In these cases, the congestion algorithms will
   require time to ramp up the packet rate.  This document improves
   traffic delivery by allowing the connection to short-cut slow RTT-
   based processes by remembering previously used connection parameters.
   Candidate parameters are Round-Trip Time (RTT) and network Bottleneck
   Bandwidth (BB).

   Previously stored parameters may not be relevant: (1) network
   conditions may change and using a previously estimated BB may cause
   congestion; (2) the client may convince a server to use a CWIN much
   larger than required.

   This document proposes safety guidelines on how to safely apply
   previously measured parameters to new connections along with security
   considerations.  This applies to resumed connections, wheter 0-RTT
   approach is exploited or not.  The document discusses implementation
   experience in QUIC.

   Section 2 discusses solutions that can enable a safe increase of the
   transmission rate.  These safety nets SHOULD be implemented when the
   transport parameters are used to increase the ingress initial
   transmission rate.  Section 4 discusses ways of implementing this in
   QUIC.

1.1.  Notations and terms

   [RFC6349] defines the BDP as follows: "Derived from Round-Trip Time
   (RTT) and network Bottleneck Bandwidth (BB), the Bandwidth-Delay
   Product (BDP) determines the Send and Received Socket buffer sizes
   required to achieve the maximum TCP Throughput."  The 1-RTT
   connection may not reproduce the procedure detailed in [RFC6349] to
   measure the BDP.  The server may exploit internal evaluations of the
   bytes in flight and minimum RTT to assess the BDP.  This draft
   considers the BDP as the Bandwidth-Delay Product as estimated by the
   server and would include the buffering in the network.

1.2.  Requirements Language

   The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119][RFC8174] when, and only when, they appear in all
   capitals, as shown here.







Kuhn, et al.            Expires November 8, 2021                [Page 3]

Internet-Draft             Transport for 0-RTT                  May 2021


2.  Safe jump start

2.1.  Rationale behind the safety guidelines

   The server should carefully exploit internal evaluations of the bytes
   in flight and minimum RTT to assess the BDP.  Indeed, the bytes in
   flight parameter that could be recalled from previous connection may
   be higher than the number of bytes in the BDP such as defined in
   [RFC6349] since it may include bytes in buffers along the path.

   Previously measured BDP should not be used as-is to avoid congestion
   collapse:

   o  Rationale #1: Network conditions may vary between 1-RTT and 0-RTT
      connections.

   o  Rationale #2: Information sent by the client may not be relevant
      since they may try to convince servers in using CWIN higher than
      required which may induce congestion.

   While safety recommendations are necessary, it seems important to
   note that CDNs currently exploit a very high Initial Window [TMA18].

2.2.  Rationale #1: Variable network conditions

   The server MUST check the validity of the BDP parameters whether they
   are sent by a client or stored at the server.  Indeed, the following
   events could make use of the BDP parameters inappropriate:

   o  IP address changes: If the client changes its IP address, it may
      employ a different network to reconnect.  The new path may not
      exhibit the same characteristics as the old one.

   o  Lifetime of the extension: If the network conditions change, e.g.
      the network was not congested when BDP parameters were evaluated
      but there is congestion for the next connection, the previously
      estimated parameters may not be valid.

   There are different solutions for the variable network conditions:

   o  Rationale #1 - Solution #1 : Directly exploit the BDP parameters
      estimated from a previous connection.

   o  Rationale #1 - Solution #2 : Implement a safety check to measure
      whether the remembered BDP parameters are relevant or if using
      them would not cause congestion in a congested betwork.





Kuhn, et al.            Expires November 8, 2021                [Page 4]

Internet-Draft             Transport for 0-RTT                  May 2021


   Section 3 describes various approaches for the Rationale #1 -
   Solution #2.

2.3.  Rationale #2: Malicious clients

   The server MUST check the authenticity of the BDP parameters received
   by a client.

   There are different solutions for malicious clients:

   o  Rationale #2 - Solution #1 : The server stores a local estimation
      of the BDP parameters.

   o  Rationale #2 - Solution #2 : The server sends the estimation of
      the BDP parameters to the client.  The client resends the
      information when resuming a connection.  The client can not read
      the BDP parameters.  The BDP parameters are protected from edition
      by the client.

   o  Rationale #2 - Solution #3 : The server sends the estimation of
      the BDP parameters to the client.  The client resends the
      information when resuming a connection.  The client can read the
      BDP parameters.  The BDP parameters are protected from edition by
      the client.

   Section 4 describes various implementation approaches for each of
   these solutions using local storage (Section 4.2 for Rationale #2 -
   Solution #1), NEW_TOKEN Frame (Section 4.3 for Rationale #2 -
   Solution #2), BDP extension frame (Section 4.4 for Rationale #2 -
   Solution #3).

2.4.  Trade-off between the different solutions

   This section proposes a discussion on the advantages and drawbacks of
   the different implementation options that are described in this
   section.  While there are some discussions for the solutions
   regarding the Rationale #2, the server MUST consider the Rationale #1
   - Solution #2 and avoid the Rationale #1 - Solution #1: the server
   MUST implement a safety check to measure whether the remembered BDP
   parameters are relevant or if using them would not cause congestion
   in a congested betwork.

2.4.1.  Security aspects

   The client may send information related to the BDP to the server with
   the BDP Frame extension using either Rationale #2 - Solution #2 or
   Rationale #2 - Solution #3.  However, the server may not trust the
   client.  Indeed, even if 0-RTT packets containing the BDP Frame are



Kuhn, et al.            Expires November 8, 2021                [Page 5]

Internet-Draft             Transport for 0-RTT                  May 2021


   encrypted, a client may modify the values within the extension and
   encrypt the 0-RTT packet.  Authentification mechanisms may not
   guarantee that the values are safe.  The server may then need to
   store the BDP parameters as well.

   A malicious client may modify the BDP parameters to convince the
   server to use a CWIN much larger than required.  Using the algorithms
   proposed in Section 3, the server may reduce any intended harm.  A
   supplementary check could be not to accept to use values that would
   be higher than those currently used by CDNs [TMA18].  Anyway, storing
   the BDP parameters locally at the server reduces the risks associated
   by allowing the client to transmit information related to the BDP of
   the network.

2.4.2.  Interoperability and use-cases

   If the server ends up storing a resumption ticket for each client to
   protect against replay on a third party IP, it may as well store the
   IP address and BDP parameters of the client.  In cases where the BDP
   Frame extension is exploited, the approach of storing the BDP
   parameters locally at the server can be used for cross-checking the
   BDP parameters sent by a client.  Anyway the server could enable safe
   jump start but without the BDP Frame extension, the client does not
   have the choice of accepting it or not.

   While storing locally values related to the BDP would help in
   improving the ingress for 0-RTT connections, not using a BDP Frame
   extension may reduce the interest of the approach where (1) the
   client knows the BDP estimations done at the server, (2) the client
   decides to accept or reject ingress optimization, (3) the client
   tunes application level requests.

2.4.3.  Summary

   As a summary, the approach of local storage of values is more secure
   and the BDP Frame extension provides more information to the client
   and more interoperability.  The Figure 1 provides a summary of the
   advantages and drawbacks of each approach.













Kuhn, et al.            Expires November 8, 2021                [Page 6]

Internet-Draft             Transport for 0-RTT                  May 2021


   +---------+-----------+----------------+---------------+-----------+
   |Rationale| Solution  |    Advantage   |    Drawback   |  Comment  |
   +---------+-----------+----------------+---------------+-----------+
   |#1       |#1         |                |               |           |
   |Variable |Directly   |Ingress optim.  |Risks of adding|MUST NOT   |
   |Network  |exploit BDP|                | congestion    |implement  |
   |         +-----------+----------------+---------------+-----------+
   |         |#2         |                |               |           |
   |         |Implement  |Reduce risks of |Negative impact|MUST       |
   |         |safety     | adding         | on ingress    |implement  |
   |         |check      | congestion     | optimi.       |Section 3  |
   +---------+-----------+----------------+---------------+-----------+
   |#2       |#1         |                |               |           |
   |Malicious|Local      |Enforced        |Client can not |           |
   |client   |storage    | security       | decide to     |           |
   |         |           |                | reject        |           |
   |         |           |                |Limited        |           |
   |         |           |                | use-cases     |Section 4.2|
   |         +-----------+----------------+---------------+-----------+
   |         |#2         |                |               |           |
   |         |NEW_TOKEN  |Save resource   |Malicious      |           |
   |         |           | at server      | client may    |           |
   |         |           |Opaque token    | change token  |           |
   |         |           | protected      | even if       |           |
   |         |           |                | protected     |           |
   |         |           |                |Server may     |           |
   |         |           |                | not trust     |           |
   |         |           |                | client        |Section 4.3|
   |         +-----------+----------------+---------------+-----------+
   |         |#3         |                |               |           |
   |         |BDP        |Extended        |Malicious      |           |
   |         |extension  | use-cases      | client may    |           |
   |         |           |Client can      | change BDP    |           |
   |         |           | read and decide| even if       |           |
   |         |           | to reject      | protected     |           |
   |         |           |BDP extension   |Server may     |           |
   |         |           | protected      | not trust     |           |
   |         |           |                | client        |Section 4.4|
   +---------+-----------+----------------+---------------+-----------+

                       Figure 1: Comparing solutions

3.  Safety guidelines

   The safety guidelines are designed to guarantee that the server does
   not add congestion to a congested network.  The following mechanisms
   should help in fulfilling this objective:




Kuhn, et al.            Expires November 8, 2021                [Page 7]

Internet-Draft             Transport for 0-RTT                  May 2021


   o  The server SHOULD compare the measured transport parameters of the
      0-RTT connection with those of the 1-RTT connection;

   o  The server MUST NOT send more than a recommended maximum initial
      window in the first transmission of data.  This value could be
      based on [TMA18].

   The proposed mechanisms SHOULD be limited by any rate-limitation
   mechanisms of QUIC, such as flow control mechanisms or amplification
   attacks prevention.  In particular, the maximum number of packets
   that can be sent without acknowledgment needs to be chosen to avoid
   the creation and the increase of congestion to a congested network.
   Moreover, the extension should not be an opportunity for the current
   connection to be a vector of an amplification attack.  The address
   validation process, used to prevent amplification attacks, SHOULD be
   considered [I-D.ietf-quic-transport].

   The following mechanisms could be implemented:

   o  Exploit a standard IW:

      1.  The server sends the first data packet using a standard
          initial window - this can be considered a safe starting point
          for an unknown path, which avoids adding congestion to a
          congested network;

      2.  If the reception of IW is confirmed for the first RTT of data,
          and also the path is determined to be similar to that of a
          recent previous session (e.g., similar RTT), the method
          permits the sender to use the previous path information as an
          input to help determine a new safe rate;

      3.  Further safety could be provided by pacing the packets as a
          function of the estimated RTT.

   o  Identify a relevant pacing rhythm:

      1.  The server estimates the pacing rhythm using the previously
          measured BDP - the interpacket transmission time is determined
          by the minimum between (1) the ratio between the current
          maximum message size (MSS) used for packets and the bottleneck
          throughput (2) a tunable safety margin that avoids sending
          more than a recommended maximum initial window;

      2.  The server estimates an IW based on the pacing rhythms and the
          RTT;





Kuhn, et al.            Expires November 8, 2021                [Page 8]

Internet-Draft             Transport for 0-RTT                  May 2021


      3.  When the estimated IW is acknowledged, the server falls back
          to a standard slow-start mechanism.

   This follows the idea of [RFC4782],
   [I-D.irtf-iccrg-sallantin-initial-spreading] and [CONEXT15].

4.  Implementation considerations

4.1.  Rationale behind the different implementation options

   Using NewSessionTickets messages of TLS is a solution that could have
   been envisionned.  The idea would be to add a 'bdp_metada' field in
   the NewSessionTickets that the client could read.  The sole extension
   currently defined in TLS1.3 that can be seen by the client is
   max_early_data_size (see section 4.6.1 of [RFC8446]).  However, in
   the general design of QUIC, TLS sessions are managed by the TLS
   stacks.

   This draft presents three distinct approaches: sending an opaque blob
   to the client that it may retransmit for future connection (see
   Section 4.3), enable a local storage of BDP related values (see
   Section 4.2) and a BDP Frame extension (see Section 4.4).

4.2.  Independent local storage of values

   This approach lets both client and server remember their BDP
   parameters independently:

   o  During a 1RTT session, the client stores the client side RTT and
      CWIN together with the session resume ticket obtained from the
      server.  The client also store the IP address of the server.

   o  The server maintains a table of previously issued tickets, indexed
      by the same random ticket identifier that is used to guarantee
      uniqueness of the AEAD encryption.  Old tokens are removed from
      the table using LRU logic.  For each ticket identifier, the table
      holds the RTT and CWIN, and also the IP address of the client.

   During the 0-RTT session, the nodes wait for the first RTT
   measurement from the peer's IP address to verify that the parameters
   have not changed.  If the RTT matches expectation, the CWIN is set to
   the remembered value.

4.3.  Using NEW_TOKEN frames

   Using NEW_TOKEN frames, the server could send a token to the client
   through a NEW_TOKEN frame.  The token is an opaque blob and the
   client can not read its content (see section 19.7 of



Kuhn, et al.            Expires November 8, 2021                [Page 9]

Internet-Draft             Transport for 0-RTT                  May 2021


   [I-D.ietf-quic-transport]).  The client sends the received token in
   the header of an Initial packet for future connection.

4.4.  BDP Frame

   This section proposes the exploitation of a new frame, BDP frame.
   The BDP frame MUST be contained in 0-RTT packets if sent by the
   client.  The BDP frame MUST be contained in 1-RTT packets if sent by
   the server.  The BDP frame MUST be considered in the congestion
   control and its data may not be limited by flow control limits.  The
   server MAY send multiple BDP frames in both 1-RTT and 0-RTT
   connections.  The client MUST NOT send BDP frames during 1-RTT
   connections.

4.4.1.  BDP Frame Format

   The BDP frames are formatted as shown in Figure 2.

   BDP Frame {
     Type (i) = 0xXXX,
     Lifetime (i),
     Reconnection Bytes In Flight (i),
     Reconnection Minimum RTT (i),
   }

                        Figure 2: BDP Frame Format

   The BDP frames contain the following fields:

   o  Lifetime (extension_lifetime): The extension_lifetime is a value
      in milliseconds that is encoded as a variable length integer.
      This follows the idea of NewSessionTicket of TLS [RFC8446].  This
      represents the validity in time of the extension.

   o  Reconnection Bytes in Flight (recon_bytes_in_flight): The
      recon_bytes_in_flight is a value in bytes that is encoded as a
      variable length integer.  The bytes in flight measured on the
      previous connection by the server.  Using the previous values of
      bytes_in_flight defined in [I-D.ietf-quic-recovery],
      recon_bytes_in_flight could be determined.

   o  Reconnection Minimum RTT (recon_min_rtt): The recon_min_rtt is a
      value in milliseconds that is encoded as a variable length
      integer.  Using the min_rtt defined in [I-D.ietf-quic-recovery],
      recon_min_rtt can be set to min_rtt.  The min_rtt parameter may
      not track a decreasing RTT: the min_rtt that is reported here may
      not be the actual minimum RTT measured during the 1-RTT




Kuhn, et al.            Expires November 8, 2021               [Page 10]

Internet-Draft             Transport for 0-RTT                  May 2021


      connection, but still reflects the characteristics of the latency
      on the network.

4.4.2.  Extension activation

   The client can accept the transmission of BDP frames from the server
   by using the following enable_bdp transport extension.

   enable_bdp (0xTBD): in the 1-RTT connection, the client indicates to
   the server that it wishes to receive BDP extension frames for
   improving ingress of 0-RTT connection.  Default value is 0.  Values
   strictly above 3 are invalid, and receipt of these values MUST be
   treated as a connection error of type TRANSPORT_PARAMETER_ERROR.

   o  0: Default value.  If the client does not send this parameter, the
      server considers that the client does not support or does not wish
      to activate the BDP extension.

   o  1: The client indicates to the server that it wishes to receive
      BDP frame and activates the ingress optimization for the 0-RTT
      connection.

   o  2: The client indicates that it does not wish to receive BDP
      frames but activates ingress optimization.

   o  3: The client indicates that it wishes to receive BDP frames but
      does not activate ingress optimization.

   This Transport Parameter is encoded as per Section 18 of
   [I-D.ietf-quic-transport].

5.  Discussion

5.1.  BDP extension protected as much as initial_max_data

   The BDP metadata parameters are measured by the server during a
   previous connection.  The BDP extension is protected by the mechanism
   that protects the exchange of the 0-RTT transport parameters.  For
   version 1 of QUIC, the BDP extension is protected using the mechanism
   that already protects the "initial_max_data" parameter.  This is
   defined in sections 4.5 to 4.7 of [I-D.ietf-quic-tls].  This provides
   the server with a way to verify that the parameters proposed by the
   client are the same as those that the server sent to the client
   during the previous connection.







Kuhn, et al.            Expires November 8, 2021               [Page 11]

Internet-Draft             Transport for 0-RTT                  May 2021


5.2.  Other use-cases

5.2.1.  Optimizing client's requests

   In a case with Dynamic Adaptive Streaming over HTTPS (DASH), clients
   might encounter issues in knowing the available path capacity or DASH
   can encounter issues in reaching the best available video playback
   quality.  The client requests could then be adapted and specific
   traffic could utilize information from the path characteristics (such
   as encouraging the client to increase the quality of video chunks, to
   fill the buffers and avoid video blocking or to send high quality
   adds).

   In other cases, applications may provide additional services if
   clients can know the server's estimation of the path characteristics.

5.2.2.  Sharing transport information across multiple connections

   There can be benefit in sharing transport information across multiple
   connections.  [I-D.ietf-tcpm-2140bis] considers the sharing of
   transport parameters between connections originating from the same
   host.  The proposal in this document has the advantage of storing
   server-generated information at the client and not requiring the
   server to retain additional state for each client.

6.  Acknowledgments

   The authors would like to thank Gabriel Montenegro, Patrick McManus,
   Ian Swett, Igor Lubashev, Robin Marx, Roland Bless and Franklin Simo
   for their fruitful comments on earlier versions of this document.

7.  IANA Considerations

   TBD: Text is required to register the BDP frame and the enable_bdp
   transport parameter.  Parameters are registered using the procedure
   defined in [I-D.ietf-quic-transport].

8.  Security Considerations

   Security considerations are discussed in Section 5 and in Section 3.

9.  References

9.1.  Normative References







Kuhn, et al.            Expires November 8, 2021               [Page 12]

Internet-Draft             Transport for 0-RTT                  May 2021


   [I-D.ietf-quic-recovery]
              Iyengar, J. and I. Swett, "QUIC Loss Detection and
              Congestion Control", draft-ietf-quic-recovery-34 (work in
              progress), January 2021.

   [I-D.ietf-quic-tls]
              Thomson, M. and S. Turner, "Using TLS to Secure QUIC",
              draft-ietf-quic-tls-34 (work in progress), January 2021.

   [I-D.ietf-quic-transport]
              Iyengar, J. and M. Thomson, "QUIC: A UDP-Based Multiplexed
              and Secure Transport", draft-ietf-quic-transport-34 (work
              in progress), January 2021.

   [I-D.ietf-tcpm-2140bis]
              Touch, J., Welzl, M., and S. Islam, "TCP Control Block
              Interdependence", draft-ietf-tcpm-2140bis-11 (work in
              progress), April 2021.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC4782]  Floyd, S., Allman, M., Jain, A., and P. Sarolahti, "Quick-
              Start for TCP and IP", RFC 4782, DOI 10.17487/RFC4782,
              January 2007, <https://www.rfc-editor.org/info/rfc4782>.

   [RFC6349]  Constantine, B., Forget, G., Geib, R., and R. Schrage,
              "Framework for TCP Throughput Testing", RFC 6349,
              DOI 10.17487/RFC6349, August 2011,
              <https://www.rfc-editor.org/info/rfc6349>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [RFC8446]  Rescorla, E., "The Transport Layer Security (TLS) Protocol
              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,
              <https://www.rfc-editor.org/info/rfc8446>.

9.2.  Informative References

   [CONEXT15]
              Li, Q., Dong, M., and P. Godfrey, "Halfback: Running Short
              Flows Quickly and Safely", ACM CoNEXT , 2015.





Kuhn, et al.            Expires November 8, 2021               [Page 13]

Internet-Draft             Transport for 0-RTT                  May 2021


   [I-D.irtf-iccrg-sallantin-initial-spreading]
              Sallantin, R., Baudoin, C., Arnal, F., Dubois, E., Chaput,
              E., and A. Beylot, "Safe increase of the TCP's Initial
              Window Using Initial Spreading", draft-irtf-iccrg-
              sallantin-initial-spreading-00 (work in progress), January
              2014.

   [TMA18]    Ruth, J. and O. Hohlfeld, "Demystifying TCP Initial Window
              Configurations of Content Distribution Networks", 2018
              Network Traffic Measurement and Analysis Conference
              (TMA) , 2018.

Appendix A.  Example

   TBD

Authors' Addresses

   Nicolas Kuhn
   CNES

   Email: nicolas.kuhn@cnes.fr


   Emile Stephan
   Orange

   Email: emile.stephan@orange.com


   Gorry Fairhurst
   University of Aberdeen

   Email: gorry@erg.abdn.ac.uk


   Tom Jones
   University of Aberdeen

   Email: tom@erg.abdn.ac.uk


   Christian Huitema
   Private Octopus Inc.

   Email: huitema@huitema.net





Kuhn, et al.            Expires November 8, 2021               [Page 14]
