<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-kuhn-quic-0rtt-bdp-07" ipr="trust200902">
	<!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

	<!-- ***** FRONT MATTER ***** -->

	<front>
		<!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

		<title abbrev="Transport for 0-RTT">Transport parameters for 0-RTT connections</title>

		<author role="editor" fullname="Nicolas Kuhn" initials="N" surname="Kuhn">
			<organization>CNES</organization>
			<address>
				<email>nicolas.kuhn@cnes.fr</email>
			</address>
		</author>

		<author role="editor" fullname="Emile Stephan" initials="E" surname="Stephan">
			<organization>Orange</organization>
			<address>
				<email>emile.stephan@orange.com</email>
			</address>
		</author>

		<author role="editor" fullname="Gorry Fairhurst" initials="G" surname="Fairhurst">
			<organization>University of Aberdeen</organization>
			<address>
				<email>gorry@erg.abdn.ac.uk</email>
			</address>
		</author>
		
		<date year="2020"/>

		<!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->

		<!-- Meta-data Declarations -->

		<area>Transport</area>

		<workgroup>Internet Engineering Task Force</workgroup>

		<!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

		<keyword>QUIC, high BDP, Transport, 0-RTT, early_data</keyword>

		<!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

		<abstract>
			<t>0-RTT improves egress traffic when reconnecting. This memo proposes the sharing of additional transport parameters to improve ingress traffic when reconnecting.</t>
		</abstract>
	</front>

	<middle>

		<section anchor="sec:introduction" title="Introduction">
			<t>Currently, QUIC 0-RTT relies on the sharing of the "initial_max_data" transport parameter between peers. It indicates to the client the number of bytes it is allowed to send in the first packet of the 0-RTT connection. This allows a faster startup of flows and enables adaptated buffer sizes at the server. The traffic that the client sends, i.e. the egress trafic, is improved.</t>
			<t>This memo proposes the sharing of additional transport parameters to provide a faster startup of flows and a better buffer management for the data that the client receives, i.e. the ingress traffic. To do so, an extension, 'BDP metadata', is proposed. Candidate transport parameters are discussed in <xref target="sec:bdp_metadata"></xref>.</t> 			
			<!-- <t>The optimization of the time-to-service duration depends on both direction optimization. QUIC may not be used for the sole use of HTTP3 services <xref target="I-D.ietf-quic-http"></xref>, but also for symmetrical services. The client device should be able to adapt to the path adaptation chosen by the server. Since there are more and more exchange based on subscription where the server sends data first, with regard to ossification, it is central to dissociate the signalling (aka the initiator of the connection) from the peer which first sends application data.</t> -->
		</section>

		<section anchor="sec:rationale" title="Motivation">
			<t>Egress acceleration like 0-RTT "initial_max_data" alone does not improve the time-to-service. While "initial_max_data" improves the egress time to server, the BDP metadata extension aims at improving ingress traffic delivery.</t>
			<!-- <t>QUIC encryption of transport headers prevents the adding of Performance-enhancing proxy (PEP). The BDP metadata extension may be a substitute to PEP proxy <xref target="RFC2488"></xref> <xref target="RFC3135"></xref> when time-to-service improvement requires acceleration of the refilling of client application buffers.</t> -->
			<!-- <t>There are reconnection situation where the time-to-service depends only on server data arrival because the service logic does not requires any additional information from the client.</t> -->
			<t>Currently each side has its proprietary solution to measure and to store path characteristics. Recalling the parameters of a previous connection would:<list style="symbols">
					<t>allow server and client to immediately recover parameters that do not need to be negociated or estimated again (minRTT, MTU, bottleneck capacity, etc.)</t>
					<t>allow the client to prepare the right resources</t>
					<t>allow server side adaptation to non-default path characteristics</t></list></t>
			<!-- <t>Avoid peers to compute the same path characteristics and decide opposed strategies: When the BDP is high the server may decide to increase the data on the flight while a resource-limited client will decide, as the ingress is expected to be slow, to reduce the resources.</t> -->
			<!-- <t>Having a symmetrical optimization reduces ossification. Having the server to share the path characteristics avoid duplicate works and allows resource-limited client to save resources like CPU, memory and power. Tune the default transport parameters of network paths which have path characteristics that increase the time-to-service.</t> -->
		</section>
				
		<section anchor="sec:bdp_metadata" title="BDP metadata parameters">
			<t>Acording to <xref target="I-D.ietf-quic-transport"></xref>, both endpoints store the value of the server transport parameters from a connection and apply them to any 0-RTT packets that are sent in subsequent connections to that peer. Amongst the six mandatory initial parameters that section 7.3.1 of <xref target="I-D.ietf-quic-transport"></xref> defines, only initial_max_data improves the time-to-service of the 0-RTT connection. The BDP metadata extension augments the list of server transport parameters that are shared with the client to improve the time-to-service and save resource like CPU, memory and power.</t>
			<t>Parameters listed below migh be exchanged as transport parameter:<list style="symbols">
				<t>recon_bytes_in_flight (0x000X): The bytes in flight measured on the previous connection by the server. It is an integer in unit of bytes. Using the bytes_in_flight defined in <xref target="I-D.ietf-quic-recovery"></xref>, recon_bytes_in_flight can be set to bytes_in_flight.</t>
				<t>recon_min_rtt (0x000X): The minimum RTT measured on the previous connection by the server. It is an integer in unit of milliseconds. Using the min_rtt defined in <xref target="I-D.ietf-quic-recovery"></xref>, recon_min_rtt can be set to min_rtt.</t>
				<t>recon_max_pkt_number (0x000X): The maximum amount of packets that the server is allowed to send when reconnecting. It is an integer in unit of packets.</t></list></t>
		</section>

		<section anchor="sec:bdp_activation" title="Extension activation">
			<t>BDP extension is protected by the mechanism which protect the exchange of the 0-RTT transport parameters. Currently, in section 7.3.1 of <xref target="I-D.ietf-quic-transport"></xref>, a client which activates 0-RTT sends back the transport parameters (initial_max_data ...) received from the server during the previous connection.</t>
			<t>The client MUST read the parameters in the BDP metadata extension but can not change them.</t>
			<t>Accept: A client which activates ingress optimization must send back the transport parameters of the BDP metadata extension that it received from the server during the previous connection.</t>
			<!-- <t>Tune: A client may send back a value lower than the recon_max_pkt_number received from the server.</t> -->
			<t>Refuse: A client which does support ingress optimisation drop the extension signal. A client which disagrees with the extension parameters received from the server refuses the optimization. A limited-resource client ignores the extension.</t>
		</section>

		<section anchor="sec:other_parameter" title="Discussion">
			<t>The recon_bytes_in_flight parameter is higher than the actual BDP since it may include bytes in buffers along the path. The recon_bytes_in_flight parameter is still a indication of the end-to-end BDP that is experienced by the congestion control. If the recon_bytes_in_flight is high, the server may decide to increase the maximum amount of packets it will send when reconnecting using the recon_max_pkt_number parameter. The maximum number of initial data packets that can be sent without acknowledgement needs to be chosen to avoid congestion collapse. An example of a server solution is proposed in <xref target="appendix-server"></xref>. In short:<list style="symbols">
				<t>recon_bytes_in_flight indicates the characteristics of the network underneath to both peers that can adapt their buffer sizes or parameter tuning.</t>
				<t>recon_min_rtt lets both client and server know the minimum RTT of the previous connection. Parameters can then be adapted (e.g. adapt how kInitialRtt is used in the "Setting the Loss Detection Timer" section of <xref target="I-D.ietf-quic-recovery"></xref>).</t>
				<t>recon_max_pkt_number lets the server warn the client that it may increase the amount of packets that it expects to send when reconnecting. This value is negotiated with the client and result in better buffer management and reduced flow start up.</t></list></t>
		<!-- <t>Another paramater that could be added to the BDP metadata extension could be the ack_ratio.<list style="symbols">
				<t>ack_ratio (0x000X): The acknowledgment ratio that has been used at the end of the previous connection by the server. It is an integer in unit of packets.</t></list></t> 
			<t>Starting with a high ACK ratio may induce bursts of packet in a potentially congested network. That being said, keeping a low ack_ratio may limit performance in case of asymmetry <xref target="PANRG106"></xref>. The server may want to be recalled the ACK ratio that had been used at the end of the connection but not use it when starting the 0-RTT conection.</t> --> 
			<t>Other parameters can contribute to the optimization of 0-RTT connection. There are good candidates, like max_ack_delay, in the Appendix of <xref target="I-D.ietf-quic-recovery"></xref>. </t>
		</section>
		
		<section anchor="sec:acknowledgements" title="Acknowledgements">
			<t>The authors would like to thank Gabriel Montenegro, Patrick McManus, Ian Swett, Igor Lubashev and Christian Huitema for their fruitful comments on earlier versions of this document.</t>
		</section>

		<section anchor="sec:IANA" title="IANA Considerations">
			<t>TBD: text is required to register the extension BDP_metadata field. Parameters are registered using the procedure defined in <xref target="I-D.ietf-quic-transport"></xref>.</t>
		</section>

		<section anchor="sec:security" title="Security Considerations">
			<t> The BDP metadata parameters are measured by the server made during a previous connection.</t>
			<t> BDP extension is protected by the mechanism which protect the exchange of the 0-RTT transport parameters. For the version 1 of QUIC, the BDP extension is protected using the mechanism which already protects the "initial_max_data" parameter. It is defined in sections 4.5 to 4.7 of <xref target="I-D.ietf-quic-tls"></xref>. It provides the server with a mean to check that the parameters proposed by the client are those the server sent to the client during the previous connexion.</t> 
		</section>
	</middle>

	<!--  *****BACK MATTER ***** -->
	<back>
		<!-- References split into informative and normative -->
		<!-- There are 2 ways to insert reference entries from the citation libraries:
	1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
	2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
	(for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")
	Both are cited textually in the same manner: by using xref elements.
	If you use the PI option, xml2rfc will, by default, try to find included files in the same
	directory as the including file. You can also define the XML_LIBRARY environment variable
	with a value containing a set of directories to search.  These can be either in the local
	filing system or remote ones accessed by http (http://domain/dir/... ).-->

		<!-- <references title="Normative References">
			&RFC2119;
		</references> -->

		<references title="Informative References">
			<!-- <?rfc include="reference.RFC.2488.xml"?> -->
			<!-- <?rfc include="reference.RFC.3135.xml"?> -->
			<!-- <?rfc include="reference.RFC.6347.xml"?> -->
			<!-- <?rfc include="reference.RFC.6349.xml"?> -->
			<!-- <?rfc include="reference.RFC.6928.xml"?> -->
			<!-- <?rfc include="reference.RFC.7413.xml"?> -->
			<!-- <?rfc include="reference.RFC.8446.xml"?> -->
			<!-- <?rfc include="reference.I-D.ietf-quic-http.xml"?> -->
			<!-- <?rfc include="reference.I-D.kuehlewind-quic-substrate.xml"?> -->
			<!-- <?rfc include="reference.I-D.pauly-quic-datagram.xml"?> -->
			<?rfc include="reference.I-D.ietf-quic-tls.xml"?>
			<?rfc include="reference.I-D.ietf-quic-transport.xml"?>
			<!-- <?rfc include="reference.I-D.ietf-quic-http.xml"?> -->
			<?rfc include="reference.I-D.ietf-quic-recovery.xml"?>
			<!-- <?rfc include="reference.I-D.ietf-tls-ticketrequests.xml"?> -->
			<!-- <?rfc include="reference.I-D.irtf-iccrg-sallantin-initial-spreading.xml"?> -->
			<!-- <reference anchor="PANRG106">
				<front>
					<title>Impact of Asymmetric Path Characteristics</title>
					<author initials="G" surname="Fairhurst">
					</author>
					<date year="2019"/>
				</front>
				<seriesInfo name="IETF PANRG" value="106"/>
			</reference> -->
			<!-- <reference anchor="ICCRG100">
				<front>
					<title>MPTCP and BBR performance over Internet satellite paths</title>
					<author initials="N" surname="Kuhn">
					</author>
					<date year="2017"/>
				</front>
				<seriesInfo name="IETF ICCRG" value="100"/>
			</reference> -->
			<!-- <reference anchor="IJSCN19">
				<front>
					<title>Google QUIC performance over a public SATCOM access</title>
					<author initials="L" surname="Thomas">
					</author>
					<author initials="E" surname="Dubois">
					</author>
					<author initials="N" surname="Kuhn">
					</author>
					<author initials="E" surname="Lochin">
					</author>
					<date year="2019"/>
				</front>
				<seriesInfo name="International Journal of Satellite Communications and Networking" value=""/>
			</reference> -->
			<!-- <reference anchor="CONEXT15">
				<front>
					<title>Halfback: Running Short Flows Quickly and Safely</title>
					<author initials="Q" surname="Li">
					</author>
					<author initials="M" surname="Dong">
					</author>
					<author initials="P B" surname="Godfrey">
					</author>
					<date year="2015"/>
				</front>
				<seriesInfo name="ACM CoNEXT" value=""/>
			</reference> -->
			<!-- <reference anchor="NCT13">
				<front>
					<title>A new survey on improving TCP performances over geostationary satellite link</title>
					<author initials="A" surname="Pirovano">
					</author>
					<author initials="F" surname="Garcia">
					</author>
					<date year="2013"/>
				</front>
				<seriesInfo name="Network and Communication Technologies" value=""/>
			</reference> -->
			<!-- <reference anchor="ICC16">
				<front>
					<title>Reducing web latency through TCP IW: Be smart</title>
					<author initials="R" surname="Sallantin">
					</author>
					<author initials="C" surname="Baudoin">
					</author>
					<author initials="E" surname="Chaput">
					</author>
					<author initials="F" surname="Arnal">
					</author>
					<author initials="E" surname="Dubois">
					</author>
					<author initials="A-L" surname="Beylot">
					</author>
					<date year="2016"/>
				</front>
				<seriesInfo name="IEEE ICC" value=""/>
			</reference> -->
		</references>
		<section anchor="appendix-server" title="Example of server solution">
			<t>This section details a solution at the server to safely increase the maximum amount of packets that the server sends when receiving a 0-RTT packet from a client.</t>
			<t>The server keeps a standard initial window to avoid adding congestion to a congested network. After the reception of the acknowledgments for the last packet of the initial window, the server checks that the min_rtt is consistent. It then adapts the congestion window to a higher value that must be paced out. The recon_max_pkt_number is then the amount of data that the server sends during the two firsts RTT.</t>
		</section>
	</back>
</rfc>
