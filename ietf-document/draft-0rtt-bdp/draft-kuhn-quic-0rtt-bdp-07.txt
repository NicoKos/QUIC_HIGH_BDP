



Internet Engineering Task Force                             N. Kuhn, Ed.
Internet-Draft                                                      CNES
Intended status: Informational                           E. Stephan, Ed.
Expires: October 1, 2020                                          Orange
                                                       G. Fairhurst, Ed.
                                                  University of Aberdeen
                                                          March 30, 2020


               Transport parameters for 0-RTT connections
                      draft-kuhn-quic-0rtt-bdp-07

Abstract

   0-RTT improves egress traffic when reconnecting.  This memo proposes
   the sharing of additional transport parameters to improve ingress
   traffic when reconnecting.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 1, 2020.

Copyright Notice

   Copyright (c) 2020 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (https://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of




Kuhn, et al.             Expires October 1, 2020                [Page 1]

Internet-Draft             Transport for 0-RTT                March 2020


   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Motivation  . . . . . . . . . . . . . . . . . . . . . . . . .   2
   3.  BDP metadata parameters . . . . . . . . . . . . . . . . . . .   3
   4.  Extension activation  . . . . . . . . . . . . . . . . . . . .   3
   5.  Discussion  . . . . . . . . . . . . . . . . . . . . . . . . .   4
   6.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .   4
   7.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   4
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .   5
   9.  Informative References  . . . . . . . . . . . . . . . . . . .   5
   Appendix A.  Example of server solution . . . . . . . . . . . . .   5
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   5

1.  Introduction

   QUIC 0-RTT relies on the sharing of the "initial_max_data" transport
   parameter between peers.  It indicates to the client the number of
   bytes it is allowed to send in the first packet of the 0-RTT
   connection.  This allows a faster startup of flows and enables
   adaptated buffer sizes at the server.  The traffic that the client
   sends, i.e. the egress trafic, is improved.

   This memo proposes the sharing of additional transport parameters to
   provide a faster startup of flows and a better buffer management for
   the data that the client receives, i.e. the ingress traffic.  To do
   so, an extension, 'BDP metadata', is proposed.  Candidate transport
   parameters are discussed in Section 3.

2.  Motivation

   There are cases where egress acceleration like 0-RTT early data alone
   does not improve the time-to-service.  While initial_max_data
   improves the egress time to server, the BDP metadata extension aims
   at improving ingress traffic delivery.

   Currently each side has its proprietary solution to measure and to
   store path characteristics.  Having a symmetrical optimization
   reduces ossification.  Moreover, recalling the parameters of a
   previous connection would:

   o  allow server and client to adapt algorithms because parameters do
      not need to be negociated or estimated again (minRTT, MTU,
      bottleneck capacity, etc.)




Kuhn, et al.             Expires October 1, 2020                [Page 2]

Internet-Draft             Transport for 0-RTT                March 2020


   o  allow the client to prepare the right resources

   o  allow server side adaptation to non-default path characteristics

3.  BDP metadata parameters

   Acording to [I-D.ietf-quic-transport], both endpoints store the value
   of the server transport parameters from a connection and apply them
   to any 0-RTT packets that are sent in subsequent connections to that
   peer.  Amongst the six mandatory initial parameters that section
   7.3.1 of [I-D.ietf-quic-transport] defines, only initial_max_data
   improves the time-to-service of the 0-RTT connection.  The BDP
   metadata extension augments the list of server transport parameters
   that are shared with the client to improve the time-to-service and
   save resource like CPU, memory and power.

   Parameters listed below migh be exchanged as transport parameter:

   o  last_bytes_in_flight (0x000X): The bytes in flight measured on the
      previous connection by the server.  It is an integer in unit of
      bytes.  Using the bytes_in_flight defined in
      [I-D.ietf-quic-recovery], last_bytes_in_flight can be set to
      bytes_in_flight.

   o  last_min_rtt (0x000X): The minimum RTT measured on the previous
      connection by the server.  It is an integer in unit of
      milliseconds.  Using the min_rtt defined in
      [I-D.ietf-quic-recovery], last_min_rtt can be set to min_rtt.

   o  initial_max_pkt_number (0x000X): The maximum amount of packets
      that the server is allowed to send when reconnecting.  It is an
      integer in unit of packets.

4.  Extension activation

   Currently, in section 7.3.1 of [I-D.ietf-quic-transport], a client
   which activates 0-RTT sends back the transport parameters
   (initial_max_data ...) received from the server during the previous
   connection.

   Accept: A client which activates ingress optimization must send back
   the transport parameters of the BDP metadata extension that it
   received from the server during the previous connection.

   Tune: A client may send back a value lower than the
   initial_max_pkt_number received from the server.





Kuhn, et al.             Expires October 1, 2020                [Page 3]

Internet-Draft             Transport for 0-RTT                March 2020


   Refuse: A client which does support ingress optimisation drop the
   extension signal.  A client which disagrees with the extension
   parameters received from the server refuses the optimization.  A
   limited-resource client ignores the extension.

5.  Discussion

   The last_bytes_in_flight parameter is higher than the actual BDP
   since it may include bytes in buffers along the path.  The
   last_bytes_in_flight parameter is still a indication of the end-to-
   end BDP that is experienced by the congestion control.  If the
   last_bytes_in_flight is high, the server may decide to increase the
   maximum amount of packets it will send when reconnecting using the
   initial_max_pkt_number parameter.  The maximum number of initial data
   packets that can be sent without acknowledgement needs to be chosen
   to avoid congestion collapse.  An example of a server solution is
   proposed in Appendix A.  In short:

   o  last_bytes_in_flight indicates the characteristics of the network
      underneath to both peers that can adapt their buffer sizes or
      parameter tuning.

   o  last_min_rtt lets both client and server know the minimum RTT of
      the previous connection.  Parameters can then be adapted (e.g.
      adapt how kInitialRtt is used in the "Setting the Loss Detection
      Timer" section of [I-D.ietf-quic-recovery]).

   o  initial_max_pkt_number lets the server warn the client that it may
      increase the amount of packets that it expects to send when
      reconnecting.  This value is negotiated with the client and result
      in better buffer management and reduced flow start up.

   Other parameters can contribute to the optimization of 0-RTT
   connection.  There are good candidates, like max_ack_delay, in the
   Appendix of [I-D.ietf-quic-recovery].

6.  Acknowledgements

   The authors would like to thank Gabriel Montenegro, Patrick McManus,
   Ian Swett, Igor Lubashev and Christian Huitema for their fruitful
   comments on earlier versions of this document.

7.  IANA Considerations

   TBD: text is required to register the extension BDP_metadata field.
   Parameters are registered using the procedure defined in
   [I-D.ietf-quic-transport].




Kuhn, et al.             Expires October 1, 2020                [Page 4]

Internet-Draft             Transport for 0-RTT                March 2020


8.  Security Considerations

   The BDP metadata parameters are measured by the server made during a
   previous connection.

   BDP extension is protected by the mechanism which protect the
   exchange of the 0-RTT transport parameters.  For the version 1 of
   QUIC, the BDP extension is protected using the mechanism which
   already protects the 'initial_max_data' parameter.  It is defined in
   sections 4.5 to 4.7 of [I-D.ietf-quic-tls].  It provides the server
   with a mean to check that the parameters proposed by the client are
   those the server sent to the client during the previous connexion.

9.  Informative References

   [I-D.ietf-quic-recovery]
              Iyengar, J. and I. Swett, "QUIC Loss Detection and
              Congestion Control", draft-ietf-quic-recovery-27 (work in
              progress), March 2020.

   [I-D.ietf-quic-tls]
              Thomson, M. and S. Turner, "Using TLS to Secure QUIC",
              draft-ietf-quic-tls-27 (work in progress), February 2020.

   [I-D.ietf-quic-transport]
              Iyengar, J. and M. Thomson, "QUIC: A UDP-Based Multiplexed
              and Secure Transport", draft-ietf-quic-transport-27 (work
              in progress), February 2020.

Appendix A.  Example of server solution

   This section details a solution at the server to safely increase the
   maximum amount of packets that the server sends when receiving a
   0-RTT packet from a client.

   The server keeps a standard initial window to avoid adding congestion
   to a congested network.  After the reception of the acknowledgments
   for the last packet of the initial window, the server checks that the
   min_rtt is consistent.  It then adapts the congestion window to a
   higher value that must be paced out.  The initial_max_pkt_number is
   then the amount of data that the server sends during the two firsts
   RTT.

Authors' Addresses







Kuhn, et al.             Expires October 1, 2020                [Page 5]

Internet-Draft             Transport for 0-RTT                March 2020


   Nicolas Kuhn (editor)
   CNES

   Email: nicolas.kuhn@cnes.fr


   Emile Stephan (editor)
   Orange

   Email: emile.stephan@orange.com


   Gorry Fairhurst (editor)
   University of Aberdeen

   Email: gorry@erg.abdn.ac.uk



































Kuhn, et al.             Expires October 1, 2020                [Page 6]
