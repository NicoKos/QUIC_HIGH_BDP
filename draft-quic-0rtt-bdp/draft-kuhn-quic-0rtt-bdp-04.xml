<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<?rfc strict="yes" ?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes" ?>
<?rfc subcompact="no" ?>
<rfc category="info" docName="draft-kuhn-quic-0rtt-bdp-04" ipr="trust200902">
	<!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

	<!-- ***** FRONT MATTER ***** -->

	<front>
		<!-- The abbreviated title is used in the page header - it is only necessary if the
         full title is longer than 39 characters -->

		<title abbrev="Transport for 0-RTT">Transport parameters for 0-RTT connections</title>

		<author role="editor" fullname="Nicolas Kuhn" initials="N" surname="Kuhn">
			<organization>CNES</organization>
			<address>
				<email>nicolas.kuhn@cnes.fr</email>
			</address>
		</author>

		<author role="editor" fullname="Emile Stephan" initials="E" surname="Stephan">
			<organization>Orange</organization>
			<address>
				<email>emile.stephan@orange.com</email>
			</address>
		</author>

		<author role="editor" fullname="Gorry Fairhurst" initials="G" surname="Fairhurst">
			<organization>University of Aberdeen</organization>
			<address>
				<email>gorry@erg.abdn.ac.uk</email>
			</address>
		</author>
		
		<date month="November" year="2019"/>

		<!-- If the month and year are both specified and are the current ones, xml2rfc will fill
         in the current day for you. If only the current year is specified, xml2rfc will fill
	 in the current day and month for you. If the year is not the current one, it is
	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
	 specify just the year. -->

		<!-- Meta-data Declarations -->

		<area>Transport</area>

		<workgroup>Internet Engineering Task Force</workgroup>

		<!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

		<keyword>QUIC, high BDP, Transport, 0-RTT, early_data</keyword>

		<!-- Keywords will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff
         output. If you submit your draft to the RFC Editor, the
         keywords will be used for the search engine. -->

		<!-- ######################################################-->
		<!-- ######################################################-->
		<!-- Head of the document -->
		<!-- ######################################################-->
		<!-- ######################################################-->
		<abstract>
			<t>The time-to-service duration depends on both peers exchange optimization. The peer initiating the connection may not be the one which send data first. Moreover, clients may be resource-limited, behind a low bandwidth or connected to a long-RTT network and may need to  adapt dynamically to improve data reception. Currently, each side has its proprietary solution to measure and to store path characteristics. Having a standard way to share these parameters should improve the adaptation to a non standard path characteristics.</t>
			<t> QUIC v1 specification already reflects this approach. Having a symmetrical control of the optimization should reduce protocol ossification. This memo proposes the sharing of the characteristics of the path amongst the peer to reduce HTTP3 time-to-service for non default transport situation.</t>
		</abstract>
	</front>

	<middle>

		<section anchor="sec:introduction" title="Introduction">
			<t>Some network paths result in an increased time-to-service because the default parameters controlling the initialization of the transport and congestion control are not suitable for the path characteristics. QUIC's default congestion control is based on TCP NewReno <xref target="I-D.ietf-quic-recovery"/> and the recommended initial window is defined by <xref target="RFC6928"/>. A path with a large bandwidth delay product can therefore significantly increase the time-to-service (e.g. a path using satellite communication <xref target="IJSCN19"/> could observe a much longer page load time for complex pages). The 0-RTT mechanism is designed to accelerate the throughput when reconnecting to the same peer. There are cases where egress acceleration like 0-RTT early_data alone does not improve the time-to-service and cases where the data transmission is symmetrical or where clients are capacity-limited: additional information are needed on the client side.</t>
			<t>As QUIC transport security is based on TLS1.3 <xref target="I-D.ietf-quic-tls"></xref>, this memo describes a solution where a BDP_metadata extension is added to the NewSessionTicket of TLS1.3 [TO DO ADD REF]. The BDP_metadata informs the client about path parameters so that both the client and the server can contribute to the reduction of the time-to-service. This data is protected from in the middle-attack such as the 'early_data' extension.<list style="numbers">
				<t>the server learns characteristics of the path during a previous;</t>
				<t>the server sends this information to the client at any time during this connection after the BDP_metadata parameters are validated;</t>
				<t>the client may discard the ticket for reasons like validation period too short, not consistent with its own path characteristics measure, device with limited buffer, etc.;</t>
				<t>the server and the client exploit the information to improve the time-to-service during subsequent 0-RTT connections.</t>
				</list>
			</t>
			<!-- <t>This memo discusses a solution where the client is informed about path parameters: both the client and the server can contribute to the reduction of the time-to-service for subsequent connections. This would improve symmetrical transmission of data and reduce ossification of the protocol. To improve the time-to-service of subsequent 0-RTT reconnection the server currently sets in the early_data extension the maximum volume of egress data the client is allowed to send when reconnecting. This memo proposes BDP_metadata, an additional extension, to also inform the client about path parameters. </t> -->
			<t>The proposed solution focuses on QUIC but applies to any transport based on TLS1.3 like TCP Fast Open or DTLS.</t> 			
			<t>This proposal follows both the approach of the extension field 'early_data' of the NewSessionTicket of TLS1.3 and its mapping in QUIC. While 'early_data' improves the egress traffic of a client, the 'BDP_metadata' proposal aims at improving ingress traffic to the client. Improving the ingress traffic can result in significant improvement to the quality-of-experience. For example, this enables the use of transport parameters, such as the RTT, PMTU and BDP to adapt the initial data transmission of a 0-RTT connection. In some large BDP deployment scenarios, this can halve the page load time of a web page download.</t>
			<t>For the mapping of NewSessionTicket in QUIC, QUIC transports the 'early_data' value outside the NewSessionTicket in the "initial_max_data" transport parameters (see section 4.5 of <xref target="I-D.ietf-quic-tls"<</xref>).</t> 
		
			<section anchor="subsec:intro_rationale" title="Reducing ossification with the proposed solution">
			<t>While each client and server can have their dedicated solution to store path parameters, having a standard way of exchanging this information helps in providing symmetrical control of the optimisation and reducing protocol ossification. This memo discusses a solution where the client is informed about path parameters: both the client and the server can contribute to the reduction of the time-to-service for subsequent connections. This would improve symmetrical transmission of data and reduce ossification of the protocol. Some advantages of the proposed solution are the following.<list style="numbers">
				<t>Provide symmetrical control of the optimisation: as extensions to HTTP3 envision server initiated request <xref target="I-D.ietf-quic-http"/> the path adaptation should be symmetrical and should not depend on rule of the peer in the establishment. Moreover, QUIC may not be used for the sole use of HTTP3 services, but also for symmetrical services: QUIC is considered as a relevant candidate for setting up proxies or tunnels <xref target="I-D.kuehlewind-quic-substrate"/> or for transmiting unreliable datagrams <xref target="I-D.pauly-quic-datagram"/>. The client device should be able to adapt to the path adaptation chosen by the server. Since there are more and more exchange based on subscription where the server sends data first, with regard to ossification, it is central to dissociate the signalling (aka the initiator of the connection) from the peer which first sends application data.</t>
				<t>Reduce TCP-proxy and middleboxes: if both clients and servers have the required parameters to optimize the transmissions for different deployment scenarios, end-to-end optimization may be proposed. As example, specific client-based adaptations can be developed, such as adapting the ACK-ratio or increasing the receive buffer size. Thus, deploying middleboxes that ossify the Internet would be less relevant.</t>
				<t>Improve inter-operability: while each client and server can have their dedicated solution to store path parameters, having a standard way of exchanging this information helps in reducing the time-to-service when clients and servers are not provided by the same company. Both sides can independently propose optimizations to improve the ingress traffic.</t>
			</list> </t> 
			</section>
			
		</section>

		<!-- ######################################################-->
		<!-- ######################################################-->
		<!-- Body of the document -->
		<!-- ######################################################-->
		<!-- ######################################################-->

		<!-- ######################################################-->
		<!-- New section -->
		<!-- ######################################################-->

		<section anchor="sec:quic-connec-est" title="Differences between 1-RTT and 0-RTT QUIC connections establishment">

			<t>This section recalls how 1-RTT and 0-RTT operate in QUIC <xref target="I-D.ietf-quic-transport"/>.</t>

			<t>QUIC leverages the 2 handshakes of TLS1.3 <xref target="I-D.ietf-quic-tls"/>: The 1-RTT handshake initiates a first set of credentials. When a handshake achieves successfully, the server pushes the learned information about the session to the client in an opaque session ticket (see section 4.6.1 of <xref target="RFC8446"/>). The information within the opaque ticket is encrypted by the server and not readable by the client.  A session ticket can be sent at any time during the connection. The server can send several session tickets in one connection. A client willing to establish a fast re-opening of the session pushes back an opaque ticket in a 0-RTT handshake and sends early application data.</t>

			<t>In practice, the server sends the 'ticket' in a NewSessionTicket record <xref target="I-D.ietf-quic-tls"/>. The structure of the NewSessionTicket includes the opaque 'ticket' and an 'extensions' field. The NewSessionTicket carries an additional field named 'early_data' that indicates to the client the maximum size of application data to insert in the 0-RTT message.</t>

		</section>

		<!-- ######################################################-->
		<!-- New section -->
		<!-- ######################################################-->

		<section anchor="sec:e2e_sol" title="End-to-end solution">

			<t>QUIC encryption of transport headers prevents the adding of Performance-enhancing proxy (PEP). The BDP metadata extension may be a substitute to PEP proxy <xref target="RFC2488"/>, <xref target="RFC3135"/> when time-to-service improvement requires acceleration of the refilling of client application buffers.</t>
			
			<t>The BDP_metadata extension proposes an improvement of the initialization of 0-RTT connections where the client recalls the BDP metadata previously measured by the server during the 1-RTT handshake. The approach follows the tuning of the initial window of high BDP networks described in <xref target="I-D.irtf-iccrg-sallantin-initial-spreading"/>. It has been shown to improve performance both for high BDP and more common BDP <xref target="CONEXT15"/><xref target="ICC16"/>.</t>
			
			<section anchor="sec:e2e_sol:description" title="Description of the BDP metadata extension">
				<t>This document defines an extension named "BDP_metadata" for the NewSessionTicket. This structure contains the following parameters: BDP, MTU, RTT, loss-rate.</t> <!-- This is the value in bits (using the same units defined by <xref target="RFC6349"/>). -->
					<!-- The reception of the field BDP_metadata provides the client with 3 indications:<list style="symbols">
						<t>This path to this server has a large BDP;</t>
						<t>The server added the path characteristics in the opaque 'ticket' field;</t>
						<t>The server SHOULD optimize the reopening of the session upon reception of this opaque ticket.</t>
					</list> -->
			</section>

			<section anchor="sec:e2e_sol:usage" title="Usage of the extension in the NewSessionTicket">
				<t>At the end of a 1-RTT connection, a server can send information in a NewSessionTicket that describes the path to the client. The message includes an additional 'extensions' field named 'BDP_metadata'. The client stores this session ticket and the 'BDP_metadata' field.</t>
				<t>When the client reconnects to the same server in 0-RTT mode, it pushes back this session  ticket in the ClientHello and prepares itself to receive data in the context given by the 'BDP_metadata' field. The client does not send the 'BDP_metadata' field back to the server. The server receives the session ticket and extracts the BDP context. As example, it can use this message to provide information that may allow the congestion controller to provide a throughput closer to the capacity of the path.</t>
				<t>Because the path characteristics can change over time, and may hence become invalid for use in a subsequent connection, the server sets the age of the ticket (see section 4.2.11.1 of <xref target="RFC8446"/>) to a short duration. To guarantee that the ticket is still valid, the server could also exploit the IP address of the client. A server could also update the ticket when the path characteristics of connection are known to have changed.</t>
			</section>

		</section>

		<!-- ######################################################-->
		<!-- New section -->
		<!-- ######################################################-->

		<section anchor="sec:best-current-practice" title="Best current practice">
			<t>This section provides examples of data that could be added in the opaque ticket field by the server. The details added by the server in the session ticket do not need to be standardized for interoperability between QUIC clients and servers because this information is opaque to the client. The presence of the "BDP_metadata" extension field in the NewSessionTicket informs the client that the server can actively take action to improve its throughput when the session will restart.</t>
			<t>The following list describes information elements set by the server in the session ticket to accompany the signaling of field. These examples are illustrated in <xref target="fig:bcp_example"/> and their purpose is detailed in this section.<list style="symbols">
				<t>A client aware of a high BDP path: Section 7.3.1 of <xref target="I-D.ietf-quic-transport"/> indicates that the "A client that attempts to send 0-RTT data MUST remember the transport parameters used by the server". In addition to the default transport parameters used by the server, a server that knows that the path has a large BDP can let the client adapt its parameters.</t>
				<t>PMTU: Knowledge of the PMTU of a previous path improves the time to service because it reduces the duration of the path validation process described in section 8.2 of <xref target="I-D.ietf-quic-transport"/>.</t>
				<t>Connection RTT: The knowledge of the characteristics of a previous connection RTT can improve the throughput because a server can safely improve the slow start: e.g. using the pacing models of <xref target="I-D.irtf-iccrg-sallantin-initial-spreading"/> can result in high IW for high RTT paths and a common IW for paths with smaller RTT. The results presented in <xref target="ICC16"/> show that for both files of 15 KB and 750 KB, the proposed solution reduces the time to download by approximatively 2 seconds whether the RTT is 50ms or 500ms.</t>
				<t>Ticket_lifetime: The server sets a shorter validity duration to avoid receiving obsolete path characteristics; (e.g., this could reduce the validity to one day).</t>
			</list>
			</t>
			<figure anchor="fig:bcp_example" title="Example of opaque ticket content">
				<artwork>
           CLIENT                         SERVER
           +-----------------------------------+
           |          1 RTT connection         |
           +-----------------------------------+
             |                              |
             +&lt;---1-RTT TLS1.3 HANDSHAKE---&gt;+
             |                              | +------------+
             +&lt;-----data transmission------&gt;+ |path charact|
             |                              | |record      |
             |                              | +------------+
             |&lt;-------------NewSessionTicket+  
+----------+ |           +ticket_lifetime   |
|client    | |           +'opaque' field    |
|aware of  | |           +'extension' field |
|path      | |            + early_data      |
|charat.   | |            + BDP_metadata    |
+----------+ |              + BDP           |
             |              + RTT           |
             |              + loss-rate     |
             |              + MTU           |
           +-----------------------------------+
           |          0 RTT connection         |
           +-----------------------------------+
             |                              |
             +ClientHello------------------&gt;|
             |+'opaque' field               | 
             |                              | +-------------------+
             |                              | |server aware of    |
             |                              | |path charact.      |
             |                              | +-------------------+
             |                              |
             +&lt;----+data transmission+-----&gt;+
             |                              |
             +                              +
				</artwork>
			</figure>

		</section>

		<!-- ######################################################-->
		<!-- New section -->
		<!-- ######################################################-->

		<section anchor="sec:issue-bad-BDP" title="What happens when BDP is used incorrectly?">

			<!-- <t>This section discusses what happens when the NewSessionTicket extension 'BDP_data' is used incorrectly.</t>

			<section title="On the high BDP estimation">
				<t>There are multiple cases where accurately measuring the BDP is complexed. As one example, this is particularly challenging when the files to transmit are small.</t>
				<t>That being said, there are ways to estimate the BDP that could be relevant and legitimate the approach proposed in this document:<list style="symbols">
					<t>the server could first exploit RTT measurements to identify that the connection could require ingress traffic improvements. The server could activate the 'BDP_data' extension field.</t>
					<t>to have an accurate bandwidth estimation, the server could then exploit the way BBR estimates the available bandwidth.</t>			
				</list>
				<t>The server could have an estimation of both the RTT and the bandwidth of the network underneath. If the RTT is high, the server could activate the 'BDP_data' extension field even if the bandwidth measurement is not accurate.</t>
			</section> -->
						
			<!-- <section title="Network with small BDP - server activating BDP_data"> -->
			<t>This section discusses the impact of a server activating the 'BDP_metadata' field when the network underneath actually has a small BDP. This could happen when the server BDP estimate was incorrect, when the client has multiple paths to choose from and uses the ticket on a different path to which it was requested, or when the path characteristics change significantly.</t>
			<t>Incorrectly exploiting the BDP_metadata could result in assigning additional resources (e.g. buffer space) that later is not used. Apart from cases where the clients are resource-limited, this is not much of an issue.</t>
			<t>The server could adapt the initial window to a high BDP context when the BDP is actually small. This issue can be prevented if packets are paced out of the server.</t>				
			<!-- </section> -->
		</section>
		
		<!-- ######################################################-->
		<!-- New section -->
		<!-- ######################################################-->

		<section anchor="sec:discussion" title="Relevance of the solution for QUIC and other protocols">
			<t>In the QUIC framework, other solutions could have been proposed. As example, the NEW_TOKEN frame could be used to send path characteristics information to the client. However, this would require to specify its content, consistently with QUIC transport parameters, so that any client can exploit the information transmitted by any server in a standard way. Moreover, the NEW_TOKEN frame is not symmetrical  (Clients MUST NOT send NEW_TOKEN frames) does not enable the support of a symmetrical control of the optimisation.</t>    

			<t>The proposed solution has been proposed with QUIC standardization in mind but is applicable to any transport under TLS1.3.</t>
			<!-- <t>Deeper adaptations of the QUIC congestion control can improve the end-user experience in high BDP contexts but proposing it for other contexts may not be relevant. Indeed, designing either the data-center or the end-user stacks based on large BDP constraints can hardly be done if the deployment is not dedicated to this context (such as it would be the case with specific CDN). Adapting a generic data-center may not be viable since it may result in too aggressive behavior for more common BDP. Moreover, at the end-user side, adapting the stacks or the browser has been proposed in the past but maintenance is mre complex because there can often be a change to the version of the web browsers' version.</t> -->

		</section>

		<!-- ######################################################-->
		<!-- ######################################################-->
		<!-- Tail of the document -->
		<!-- ######################################################-->
		<!-- ######################################################-->

		<section anchor="sec:acknowledgements" title="Acknowledgements">
			<t>The authors would like to thank Gabriel Montenegro, Patrick McManus, Ian Swett, Igor Lubashev and Christian Huitema for their fruitfull comments on earlier versions of this document.</t>
		</section>

		<section anchor="sec:IANA" title="IANA Considerations">
			<t>TBD: text is required to register the extension BDP_metadata field.</t>
		</section>

		<section anchor="sec:security" title="Security Considerations">
			<t>The security is provided by the 1-RTT phase. The measure of BDP is made during a previous connection. The exchange and the information are protected both by the TLS encryption and the NewSessionTicket (see section 4.6.1 of <xref target="RFC8446"/>).</t>
			<t>The BDP information the server will received is protected in the opaque session ticket. The 'BDP_metadata' field is visible by the client only. An client that does not trust the server transport adaptation ignores any session ticket associated to a 'BDP_metadata' field.</t>
			<t>The server does not have to honour all the received requests (e.g. when it is resource-limited).</t>
		</section>
	</middle>

	<!--  *****BACK MATTER ***** -->
	<back>
		<!-- References split into informative and normative -->
		<!-- There are 2 ways to insert reference entries from the citation libraries:
	1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
	2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
	(for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")
	Both are cited textually in the same manner: by using xref elements.
	If you use the PI option, xml2rfc will, by default, try to find included files in the same
	directory as the including file. You can also define the XML_LIBRARY environment variable
	with a value containing a set of directories to search.  These can be either in the local
	filing system or remote ones accessed by http (http://domain/dir/... ).-->

		<references title="Normative References">
			&RFC2119;
		</references>

		<references title="Informative References">
			<?rfc include="reference.RFC.2488.xml"?>
			<?rfc include="reference.RFC.3135.xml"?>
			<?rfc include="reference.RFC.6349.xml"?>
			<?rfc include="reference.RFC.6928.xml"?>
			<?rfc include="reference.RFC.8446.xml"?>
			<?rfc include="reference.I-D.ietf-quic-http.xml"?>
			<?rfc include="reference.I-D.kuehlewind-quic-substrate.xml"?>
			<?rfc include="reference.I-D.pauly-quic-datagram.xml"?>
			<?rfc include="reference.I-D.ietf-quic-tls.xml"?>
			<?rfc include="reference.I-D.ietf-quic-transport.xml"?>
			<?rfc include="reference.I-D.ietf-quic-recovery.xml"?>
			<?rfc include="reference.I-D.ietf-tls-ticketrequests.xml"?>
			<?rfc include="reference.I-D.irtf-iccrg-sallantin-initial-spreading.xml"?>
			<reference anchor="ICCRG100">
				<front>
					<title>MPTCP and BBR performance over Internet satellite paths</title>
					<author initials="N" surname="Kuhn">
					</author>
					<date year="2017"/>
				</front>
				<seriesInfo name="IETF ICCRG" value="100"/>
			</reference>
			<reference anchor="IJSCN19">
				<front>
					<title>Google QUIC performance over a public SATCOM access</title>
					<author initials="L" surname="Thomas">
					</author>
					<author initials="E" surname="Dubois">
					</author>
					<author initials="N" surname="Kuhn">
					</author>
					<author initials="E" surname="Lochin">
					</author>
					<date year="2019"/>
				</front>
				<seriesInfo name="International Journal of Satellite Communications and Networking" value=""/>
			</reference>
			<reference anchor="CONEXT15">
				<front>
					<title>Halfback: Running Short Flows Quickly and Safely</title>
					<author initials="Q" surname="Li">
					</author>
					<author initials="M" surname="Dong">
					</author>
					<author initials="P B" surname="Godfrey">
					</author>
					<date year="2015"/>
				</front>
				<seriesInfo name="ACM CoNEXT" value=""/>
			</reference>
			<reference anchor="NCT13">
				<front>
					<title>A new survey on improving TCP performances over geostationary satellite link</title>
					<author initials="A" surname="Pirovano">
					</author>
					<author initials="F" surname="Garcia">
					</author>
					<date year="2013"/>
				</front>
				<seriesInfo name="Network and Communication Technologies" value=""/>
			</reference>
			<reference anchor="ICC16">
				<front>
					<title>Reducing web latency through TCP IW: Be smart</title>
					<author initials="R" surname="Sallantin">
					</author>
					<author initials="C" surname="Baudoin">
					</author>
					<author initials="E" surname="Chaput">
					</author>
					<author initials="F" surname="Arnal">
					</author>
					<author initials="E" surname="Dubois">
					</author>
					<author initials="A-L" surname="Beylot">
					</author>
					<date year="2016"/>
				</front>
				<seriesInfo name="IEEE ICC" value=""/>
			</reference>
		</references>
	</back>
</rfc>
